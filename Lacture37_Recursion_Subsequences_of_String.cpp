/* Subsequences of String - Codeing ninjas
Problem statement
You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10 
1 <=  |STR| <= 16

Where |STR| represents the length of the string 'STR'.

Time Limit: 1 sec
Sample Input 1:
1 
abc
Sample Output 1:
a ab abc ac b bc c
Explanation of sample input 1:
All possible subsequences of abc are :  
“a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”
Sample Input 2:
1
bbb
Sample Output 2:
b b b bb bb bb bbb
*/
#include <bits/stdc++.h>
using namespace std;

// Recursive helper function to generate subsequences
void generate(int index, string& str, string current, vector<string>& result) {
    if (index == str.size()) {
        if (!current.empty()) {
            result.push_back(current); // Add non-empty subsequence
        }
        return;
    }

    // Include current character
    generate(index + 1, str, current + str[index], result);

    // Exclude current character
    generate(index + 1, str, current, result);
}

// Main function to be called
vector<string> subsequences(string str) {
    vector<string> result;
    generate(0, str, "", result);
    return result;
}

// Driver code to test multiple test cases
int main() {
    int T;
    cin >> T;
    while (T--) {
        string str;
        cin >> str;
        vector<string> res = subsequences(str);
        for (string s : res) {
            cout << s << " ";
        }
        cout << "\n";
    }
    return 0;
}
